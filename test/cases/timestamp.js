// Generated by CoffeeScript 1.8.0
(function() {
  var TestCustomModel, TestModel, mocha, should;

  mocha = require("mocha");

  should = require("should");

  TestCustomModel = require("../models/timestampCustom");

  TestModel = require("../models/timestamp");

  describe("mongoose-common", function() {
    it("should create properties `createdAtAt` and `updatedAt`", function(done) {
      var timestamp;
      timestamp = Date.now();
      return new TestModel().save(function(err, doc) {
        if (err) {
          done(err);
        }
        doc.createdAt.should.be.within(timestamp, Date.now());
        doc.updatedAt.should.be.within(timestamp, Date.now());
        return done();
      });
    });
    it("should only set updatedAt when a doc is being updated", function(done) {
      var test;
      test = new TestModel();
      return test.save(function(err, old) {
        var oldCache;
        if (err) {
          done(err);
        }
        oldCache = {
          createdAt: old.createdAt,
          updatedAt: old.updatedAt
        };
        return setTimeout(function() {
          return test.save(function(err, doc) {
            if (err) {
              done(err);
            }
            doc.updatedAt.should.be.above(doc.createdAt);
            doc.updatedAt.should.be.above(oldCache.updatedAt);
            doc.createdAt.should.be.equal(oldCache.createdAt);
            return done();
          });
        }, 1000);
      });
    });
    return it("should create properties `posted` and `updated` instead of `createdAt` and `updatedAt`", function(done) {
      var timestamp;
      timestamp = Date.now();
      return new TestCustomModel().save(function(err, doc) {
        if (err) {
          done(err);
        }
        doc.posted.should.be.within(timestamp, Date.now());
        doc.updated.should.be.within(timestamp, Date.now());
        return done();
      });
    });
  });

}).call(this);
